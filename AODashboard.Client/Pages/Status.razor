@page "/status"
@using AODashboard.Client.Model
@using AODashboard.Client.Services
@attribute [Authorize(Policy = "CanViewVOR")]
@rendermode InteractiveAuto

@inject IPlaceService PlaceService
@inject IVehicleService VehicleService

<PageTitle>AO Dashboard - Vehicle Status</PageTitle>

<MudText Typo="Typo.h1">Vehicle Status</MudText>

<AODashboard.Client.Components.PlaceSelector ValueChanged="UpdateVehicles" />

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div>
        <MudDataGrid Style="margin-top: 10px" Items="vorStatuses.OrderBy(x => x.CallSign)" Virtualize="true" Height="calc(100vh - 220px)" FixedHeader="true">
            <Columns>
                <PropertyColumn Property="x => x.CallSign" Title="Call Sign" />
                <PropertyColumn Property="x => x.Registration" />
                <PropertyColumn Property="x => x.IsVor" Title="Is VOR?">
                    <CellTemplate>
                        @if (context.Item.IsVor)
                        {
                            <MudChip Color="Color.Error" Text="Yes" />
                        }
                        else
                        {
                            <MudChip Color="Color.Success" Text="No" />
                        }
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.DueBack" Title="Expected Back" />
            </Columns>
        </MudDataGrid>
    </div>
}


@code
{
    private IEnumerable<VorStatus> vorStatuses = new List<VorStatus>();
    private bool isLoading = true;

    private async Task UpdateVehicles(Place place)
    {
        isLoading = true;

        vorStatuses = await VehicleService.GetStatusesByPlace(place.Region, place.District == "All" ? null : place.District, place.Hub == "All" ? null : place.Hub).ToListAsync();

        isLoading = false;

        StateHasChanged();
    }
}