@page "/status"
@using AODashboard.Client.Model
@using AODashboard.Client.Services
@attribute [Authorize]
@rendermode InteractiveAuto

@inject IPlaceService PlaceService
@inject IVehicleService VehicleService

<PageTitle>AO Dashboard - Vehicle Status</PageTitle>

<MudText Typo="Typo.h1">Vehicle Status</MudText>

<MudToolBar>
    <MudGrid>
        <MudItem sm="4">
            <MudSelect Label="Region" T="Model.Region" @bind-Value="Region">
                <MudSelectItem Value="Model.Region.All">All</MudSelectItem>
                <MudSelectItem Value="Model.Region.EastOfEngland">East of England</MudSelectItem>
                <MudSelectItem Value="Model.Region.EastMidlands">East Midlands</MudSelectItem>
                <MudSelectItem Value="Model.Region.London">London</MudSelectItem>
                <MudSelectItem Value="Model.Region.NorthEast">North East</MudSelectItem>
                <MudSelectItem Value="Model.Region.NorthWest">North West</MudSelectItem>
                <MudSelectItem Value="Model.Region.SouthEast">South East</MudSelectItem>
                <MudSelectItem Value="Model.Region.SouthWest">South West</MudSelectItem>
                <MudSelectItem Value="Model.Region.WestMidlands">West Midlands</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem sm="4">
            <MudSelect Label="District" T="string" @bind-Value="SelectedDistrict" Disabled="!districts.Any()">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                @foreach (var district in districts)
                {
                    <MudSelectItem Value="@district">@district</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem sm="4">
            <MudSelect Label="Hub" T="string" @bind-Value="SelectedHub" Disabled="!hubs.Any()">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                @foreach (var hub in hubs)
                {
                    <MudSelectItem Value="@hub">@hub</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudToolBar>

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div>
        <MudDataGrid Style="margin-top: 10px" Items="vorStatuses.OrderBy(x => x.CallSign)" Virtualize="true" Height="calc(100vh - 220px)" FixedHeader="true">
            <Columns>
                <PropertyColumn Property="x => x.CallSign" Title="Call Sign" />
                <PropertyColumn Property="x => x.Registration" />
                <PropertyColumn Property="x => x.IsVor" Title="Is VOR?">
                    <CellTemplate>
                        @if (context.Item.IsVor)
                        {
                            <MudChip Color="Color.Error" Text="Yes" />
                        }
                        else
                        {
                            <MudChip Color="Color.Success" Text="No" />
                        }
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.DueBack" Title="Expected Back" />
            </Columns>
        </MudDataGrid>
    </div>
}


@code
{
    private Model.Region region = Model.Region.All;
    private IEnumerable<string> districts = new List<string>();
    private IEnumerable<string> hubs = new List<string>();
    private string selectedDistrict = "All";
    private string selectedHub = "All";
    private IEnumerable<VorStatus> vorStatuses = new List<VorStatus>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateVehicles();
    }

    private Model.Region Region
    {
        get => region;
        set
        {
            region = value;
            UpdateDistricts();
        }
    }

    private string SelectedDistrict
    {
        get => selectedDistrict;
        set
        {
            selectedDistrict = value;
            UpdateHubs();
        }
    }

    private string SelectedHub
    {
        get => selectedHub;
        set
        {
            selectedHub = value;
            UpdateVehicles();
        }
    }

    private async void UpdateHubs()
    {
        if (SelectedDistrict == "All")
        {
            hubs = new List<string>();
        }
        else
        {
            hubs = (await PlaceService.GetDistrictHubs(Region, SelectedDistrict)).Names;
        }

        SelectedHub = "All";

        StateHasChanged();
    }

    private async void UpdateDistricts()
    {
        if (Region == Model.Region.All)
        {
            districts = new List<string>();
        }
        else
        {
            districts = (await PlaceService.GetDistrictNames(region)).Names;
        }

        SelectedDistrict = "All";
        SelectedHub = "All";

        StateHasChanged();
    }

    private async Task UpdateVehicles()
    {
        isLoading = true;

        var result = VehicleService.GetStatusesByPlace(Region, SelectedDistrict == "All" ? null : SelectedDistrict, SelectedHub == "All" ? null : SelectedHub);

        vorStatuses = await result.ToListAsync();

        isLoading = false;

        StateHasChanged();
    }
}