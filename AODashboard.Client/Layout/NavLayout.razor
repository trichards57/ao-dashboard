@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Title="Toggle Menu" />
    <MudSpacer />
    <div class="avatar-host">
        <MudAvatar>
            <MudImage Src="/api/user/picture" Alt="@userName" />
        </MudAvatar>
    </div>
    <MudText Typo="Typo.inherit">@userName</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">AO Dashboard</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
            <MudNavLink Href="/status" Match="NavLinkMatch.All">Vehicle Status</MudNavLink>
            <MudNavLink Href="/vehicles/config" Match="NavLinkMatch.All">Vehicle Configuration</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    @code {
    private bool drawerOpen = true;
    private string userName = "";

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        userName = authState.User.FindFirst("name")?.Value ?? authState.User.Identity?.Name ?? "";
    }

    void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }
}
