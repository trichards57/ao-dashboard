@page "/roles/{id}/edit"
@using Dashboard.Client.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@attribute [Authorize(Policy = "CanEditRoles")]

@rendermode InteractiveAuto

@inject NavigationManager NavigationManager
@inject IRoleService RoleService

<h1 class="title">Edit @roleName</h1>

    @if (showError)
{
    <div class="validation-message">There was an error updating the role.</div>
}
<EditForm Model="Input" method="post" OnValidSubmit="UpdateRole" FormName="roleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary role="alert" />
    <div class="field">
        <label class="label" for="email">Vehicle Configuration</label>
        <div class="select is-fullwidth">
            <InputSelect @bind-Value="Input.VehicleConfiguration">
                <option value="@ReadWrite.Deny">Deny</option>
                <option value="@ReadWrite.Read">Read</option>
                <option value="@ReadWrite.Write">Read/Write</option>
            </InputSelect>
        </div>
        <ValidationMessage For="() => Input.VehicleConfiguration" />
    </div>
    <div class="field">
        <label class="label" for="email">VOR Data</label>
        <div class="select is-fullwidth">
            <InputSelect @bind-Value="Input.VorData">
                <option value="@ReadWrite.Deny">Deny</option>
                <option value="@ReadWrite.Read">Read</option>
                <option value="@ReadWrite.Write">Read/Write</option>
            </InputSelect>
        </div>
        <ValidationMessage For="() => Input.VorData" />
    </div>
    <div class="field">
        <label class="label" for="email">User Role</label>
        <div class="select is-fullwidth">
            <InputSelect @bind-Value="Input.Permissions">
                <option value="@ReadWrite.Deny">Deny</option>
                <option value="@ReadWrite.Read">Read</option>
                <option value="@ReadWrite.Write">Read/Write</option>
            </InputSelect>
        </div>
        <ValidationMessage For="() => Input.Permissions" />
    </div>
    <div class="buttons">
        <button class="button is-primary is-fullwidth" type="submit">Save</button>
    </div>
</EditForm>

@code {
    private string roleName = default!;
    private bool showError = false;

    [Parameter]
    public string Id { get; set; } = default!;

    private RolePermissionsUpdate Input { get; set; } = new();

    public async Task UpdateRole()
    {
        if (await RoleService.SetRolePermissions(Id, Input))
        {
            NavigationManager.NavigateTo("/roles");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var input = await RoleService.GetRolePermissions(Id);

        if (input == null)
        {
            NavigationManager.NavigateTo("/roles");
            return;
        }

        Input = new RolePermissionsUpdate { Permissions = input.Permissions, VehicleConfiguration = input.VehicleConfiguration, VorData = input.VorData };
        roleName = input.Name;
    }
}
