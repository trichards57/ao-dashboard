@page "/users"
@using Dashboard.Client.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@implements IDisposable

@attribute [Authorize(Policy = "CanViewUsers")]

@rendermode InteractiveAuto

@inject IUserService UserService
@inject ILogger<Edit> Logger
@inject PersistentComponentState PersistentComponentState

<h1 class="title">User Settings</h1>

<table class="table is-striped is-fullwidth">
    <thead>
        <tr>
            <th>User</th>
            <th>Role</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var r in users.OrderBy(r => r.Name))
        {
            <tr>
                <td>@r.Name</td>
                <td>@(r.Role ?? "None")</td>
                <td class="edit">
                    @if (r.Id != userId)
                    {
                        <a href="/users/@r.Id/edit">Edit</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private List<UserWithRole> users = new();
    private string userId = "";
    private PersistingComponentStateSubscription subscription;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        var isAdmin = authState.User.IsInRole("Administrator");

        subscription = PersistentComponentState.RegisterOnPersisting(Persist);

        var foundInState = PersistentComponentState.TryTakeFromJson<List<UserWithRole>>("users", out var state);

        var items = (foundInState && state != null) ? state : await UserService.GetUsersWithRole().Where(r => r.Role != "Administrator" || isAdmin).ToListAsync();

        foreach (var r in items)
        {
            users.Add(r);
        }
    }

    private Task Persist()
    {
        PersistentComponentState.PersistAsJson("users", users);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        subscription.Dispose();
    }
}
