@page "/users/{id}/edit"
@using Dashboard.Client.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@attribute [Authorize(Policy = "CanEditUsers")]

@rendermode InteractiveAuto

@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IRoleService RoleService
@inject ILogger<Edit> Logger

<h1 class="title">Update @roleName</h1>

@if (showError)
{
    <div class="validation-message">There was an error updating the user.</div>
}
<EditForm Model="Input" method="post" OnValidSubmit="UpdateRole" FormName="roleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary role="alert" />
    <div class="field">
        <label class="label" for="role">Role</label>
        <div class="select is-fullwidth">
            <InputSelect @bind-Value="Input.RoleId">
                @if (Input.RoleId == "None")
                {
                    <option value="None">None</option>
                }
                @foreach (var r in Roles.OrderBy(r => r.Name).Where(r => r.Name != "Administrator" || isAdmin))
                {
                    <option value="@r.Id">@r.Name</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="() => Input.RoleId" />
    </div>
    <div class="buttons">
        <button class="button is-primary is-fullwidth" type="submit">Save</button>
    </div>
</EditForm>

@code {
    private string roleName = default!;
    private bool showError = false;
    private bool isAdmin = false;

    [Parameter]
    public string Id { get; set; } = default!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private UserRoleUpdate Input { get; set; } = new();

    private List<RolePermissions> Roles { get; set; } = new();

    public async Task UpdateRole()
    {
        if (await UserService.SetUserRole(Id, Input))
        {
            NavigationManager.NavigateTo("/users");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;

        isAdmin = authState.User.IsInRole("Administrator");

        Logger.LogInformation($"User is Admin : {isAdmin}");

        Roles = await RoleService.GetRoles().ToListAsync();
        var input = await UserService.GetUserWithRole(Id);

        if (input == null)
        {
            NavigationManager.NavigateTo("/users");
            return;
        }

        Input = new UserRoleUpdate { RoleId = input.RoleId ?? "None" };
        roleName = input.Name;
    }
}
