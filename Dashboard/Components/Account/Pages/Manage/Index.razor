@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Dashboard.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Index> Logger

<PageTitle>AO Dashboard - Manage Profile</PageTitle>

<ManageLayout IsMicrosoftAccount="@isMicrosoftAccount">
    <h2 class="title is-4">Manage Profile</h2>
    <StatusMessage />

    <EditForm Enhance EditContext="editContext" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="notification is-danger" role="alert" />
        <AppText Name="name" Label="Name" @bind-Value="Input.Name" For="() => Input.Name" autocomplete="name" placeholder="Please enter your name." />
        <SubmitButton Label="Update Profile" />
    </EditForm>
</ManageLayout>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private bool isMicrosoftAccount = false;
    private ApplicationUser user = default!;
    private EditContext? editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Input);
        editContext.SetFieldCssClassProvider(new BulmaFieldCssClassProvider());

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var logins = await UserManager.GetLoginsAsync(user);
        isMicrosoftAccount = logins.Any(l => l.ProviderDisplayName == "Microsoft");

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            Input.Name = user.RealName;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Name != user.RealName)
        {
            user.RealName = Input.Name!;
            var result = await UserManager.UpdateAsync(user);

            if (!result.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Unable to change your name.", HttpContext);
            }
            else
            {
                Logger.User_Profile_Updated(user.Id);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your name.")]
        public string? Name { get; set; }
    }
}
