@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using Dashboard.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger
@inject NavigationManager NavigationManager

<PageTitle>AO Dashboard - Reset Authenticator</PageTitle>

<ManageLayout>
    <h2 class="title is-4">Reset Authenticator</h2>
    <div class="block">
        <p class="has-text-weight-bold">
            If you reset your authenticator key your authenticator app will not work until you reconfigure it.
        </p>
        <p>
            This process disables two-factor authentication until you verify your authenticator app.
            If you do not complete your authenticator app configuration you may lose access to your account.
        </p>
    </div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <SubmitButton IsDanger Label="Reset Authenticator Key" />
    </form>
</ManageLayout>


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var logins = await UserManager.GetLoginsAsync(user);
        var isMicrosoftAccount = logins.Any(l => l.ProviderDisplayName == "Microsoft");

        if (isMicrosoftAccount)
        {
            NavigationManager.NavigateTo("/Account/Manage", new NavigationOptions { ReplaceHistoryEntry = true });
        }
    }

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.User_ResetTwoFactor(userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
            HttpContext);
    }
}
