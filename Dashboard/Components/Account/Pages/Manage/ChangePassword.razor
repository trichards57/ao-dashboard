@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Dashboard.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject NavigationManager NavigationManager

<PageTitle>AO Dashboard - Change Password</PageTitle>

<ManageLayout>
    <h2 class="title is-4">Change Password</h2>
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="notification is-danger">
            @errorMessage
        </div>
    }

    <EditForm EditContext="editContext" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="notification is-danger" role="alert" />
        <AppText Name="old-password" Label="Old Password" type="password" @bind-Value="Input.OldPassword" For="() => Input.OldPassword" autocomplete="current-password" placeholder="Please enter your old password." />
        <AppText Name="new-password" Label="New Password" type="password" @bind-Value="Input.NewPassword" For="() => Input.NewPassword" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
        <AppText Name="confirm-password" Label="Confirm Password" type="password" @bind-Value="Input.ConfirmPassword" For="() => Input.ConfirmPassword" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
        <SubmitButton Label="Update Password" />
    </EditForm>

</ManageLayout>

@code {
    private string? errorMessage;
    private ApplicationUser user = default!;
    private bool hasPassword;
    private EditContext? editContext;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Input);
        editContext.SetFieldCssClassProvider(new BulmaFieldCssClassProvider());
      
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var logins = await UserManager.GetLoginsAsync(user);
        var isMicrosoftAccount = logins.Any(l => l.ProviderDisplayName == "Microsoft");

        if (isMicrosoftAccount)
        {
            NavigationManager.NavigateTo("/Account/Manage", new NavigationOptions { ReplaceHistoryEntry = true });
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            errorMessage = string.Join(",", changePasswordResult.Errors.Select(error => error.Description));
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.User_ChangedPassword(user.Id);

        // TODO : Display this status message.

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your current password.")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "You need to enter a new password")]
        [StringLength(100, ErrorMessage = "Your new password must be at least {2} and at most {1} characters long.", MinimumLength = 6)]
        public string NewPassword { get; set; } = "";

        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
