@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Dashboard.Client.Validation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Dashboard.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>AO Dashboard - Change Email</PageTitle>

<ManageLayout>
    <StatusMessage Message="@message" />

    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary role="alert" class="notification is-danger" />
        <div class="field">
            <label for="email" class="label">Email</label>
            <input type="email" value="@email" class="input" placeholder="Please enter your email." disabled />
        </div>
        <div class="field">
            <label for="new-email" class="label">New email</label>
            <InputText class="input" @bind-Value="Input.NewEmail" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
            <ValidationMessage class="help is-danger" For="() => Input.NewEmail" />
        </div>
        <div class="buttons">
            <button type="submit" class="button is-primary is-fullwidth">Change email</button>
        </div>
    </EditForm>
</ManageLayout>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        var logins = await UserManager.GetLoginsAsync(user);
        var isMicrosoftAccount = logins.Any(l => l.ProviderDisplayName == "Microsoft");

        if (isMicrosoftAccount)
        {
            NavigationManager.NavigateTo("/Account/Manage", new NavigationOptions { ReplaceHistoryEntry = true });
        }

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your email address.")]
        [EmailAddress]
        [NonSjaEmail(ErrorMessage = "SJA email address holders cannot use local accounts.")]
        public string? NewEmail { get; set; }
    }
}
