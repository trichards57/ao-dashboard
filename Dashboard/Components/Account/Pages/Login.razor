@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Dashboard.Client.Validation
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Dashboard.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>AO Dashboard - Sign In</PageTitle>

<h1 class="title">Sign In</h1>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="notification is-danger">
        @errorMessage
    </div>
}
<section class="block">
    <h2 class="subtitle">Use your SJA Account</h2>
    <form action="Account/PerformExternalLogin" method="post">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
        <div class="is-flex is-justify-content-center">
            <button type="submit" class="button ms-login" name="provider" value="Microsoft" title="Sign in with Microsoft" />
        </div>
    </form>
</section>
<section class="block">
    <h2 class="subtitle">Use a Local Account</h2>
    <EditForm EditContext="editContext" method="post" OnValidSubmit="LoginUser" FormName="login" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary class="notification is-danger" role="alert" />
        <AppText Name="email" Label="Email" type="email" @bind-Value="Input.Email" For="() => Input.Email" autocomplete="username" aria-required="true" placeholder="Please enter your email address" />
        <AppText Name="password" Label="Password" type="password" @bind-Value="Input.Password" For="() => Input.Password" autocomplete="current-password" aria-required="true" placeholder="Please enter your password" />
        <AppCheckBox Name="remember-me" @bind-Value="Input.RememberMe" For="() => Input.RememberMe" type="checkbox">
            Remember me
        </AppCheckBox>
        <div class="buttons">
            <SubmitButton Label="Sign In" />
            <a class="button is-link is-fullwidth" href="Account/ForgotPassword">Forgot your password?</a>
            <a class="button is-link is-fullwidth" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
            <a class="button is-link is-fullwidth" href="Account/ResendEmailConfirmation">Resend email confirmation</a>
        </div>
    </EditForm>
</section>

@code {
    private string? errorMessage;
    private EditContext? editContext;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        var messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusCookieName];

        if (messageFromCookie is not null)
        {
            HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
            errorMessage = messageFromCookie;
        }

        editContext = new(Input);
        editContext.SetFieldCssClassProvider(new BulmaFieldCssClassProvider());
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            Logger.User_Login_Success("");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.User_Login_LockedOut("");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.User_Login_BadRequest();
            errorMessage = "Sign in failed.  That email address or password wasn't recognised.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your email address.")]
        [EmailAddress(ErrorMessage = "You need to enter your email address.")]
        [NonSjaEmail(ErrorMessage = "SJA email address holders must use 'Sign in with Microsoft'.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = ("You need to enter your password."))]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
