@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Dashboard.Client.Validation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Dashboard.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>AO Dashboard - Reset Password</PageTitle>

<h1 class="title">Reset Password</h1>

@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="notification is-danger">
        @Message
    </div>
}

<EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="reset-password">
    <DataAnnotationsValidator />
    <ValidationSummary role="alert" class="notification is-danger" />
    <input type="hidden" name="Input.Code" value="@Input.Code" />
    <div class="field">
        <label class="label" for="email">Email</label>
        <div class="control">
            <InputText class="input" type="email" @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.Email" />
    </div>
    <div class="field">
        <label class="label" for="password">Password</label>
        <div class="control">
            <InputText class="input" type="password" @bind-Value="Input.Password" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.Password" />
    </div>
    <div class="field">
        <label class="label" for="confirm-password">Confirm password</label>
        <div class="control">
            <InputText class="input" type="password" @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.ConfirmPassword" />
    </div>
    <div class="buttons">
        <button class="button is-primary is-fullwidth" type="submit">Reset</button>
    </div>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your email address.")]
        [EmailAddress(ErrorMessage = "You need to enter your email address.")]
        [NonSjaEmail(ErrorMessage = "SJA email address holders must reset their password through Microsoft.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = ("You need to enter your password."))]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        public string Password { get; set; } = "";

        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
