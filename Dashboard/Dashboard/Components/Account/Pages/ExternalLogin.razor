@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Dashboard.Client.Validation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Dashboard.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>AO Dashboard - Register</PageTitle>  

<h1 class="title">Register</h1>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="notification is-danger">
        @message
    </div>
}

<p>
    You've successfully sign in with your SJA account. Please can you check the form below and hit Register to finish.
</p>
<EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
    <DataAnnotationsValidator />
    <h2>Associate your Microsoft account</h2>
    <ValidationSummary role="alert" class="notification is-danger" />
    <div class="field">
        <label class="label" for="email">Name</label>
        <div class="control">
            <InputText class="input" @bind-Value="Input.RealName" autocomplete="name" placeholder="Your Name" />
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.RealName" />
    </div>
    <div class="field">
        <label class="label" for="email">Email</label>
        <div class="control">
            <InputText class="input" type="email" @bind-Value="Input.Email" autocomplete="email" placeholder="name@example.com" />
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.Email" />
    </div>
    <div class="field">
        <div class="control">
            <label class="checkbox">
                <InputCheckbox @bind-Value="Input.TermsAccept" type="checkbox" /> I have read and agree to the <a href="/Terms">Terms of Service</a>.
            </label>
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.TermsAccept" />
    </div>
    <div class="field">
        <div class="control">
            <label class="checkbox">
                <InputCheckbox @bind-Value="Input.PrivacyPolicyAccept" type="checkbox" /> I have read and accept the <a href="/Privacy">Privacy Policy</a>.
            </label>
        </div>
        <ValidationMessage class="help is-danger" For="() => Input.PrivacyPolicyAccept" />
    </div>
    <div class="buttons">
        <button type="submit" class="button is-primary is-fullwidth">Register</button>
    </div>
</EditForm>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "There was an error logging in.", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "There was an error logging in.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }

        if (!string.IsNullOrWhiteSpace(externalLoginInfo.Principal.Identity?.Name))
        {
            Input.RealName = externalLoginInfo.Principal.Identity.Name;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        var user = new ApplicationUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.RealName = Input.RealName;

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation");
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = string.Join(",", result.Errors.Select(error => error.Description));
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "You need to enter your email address.")]
        [EmailAddress(ErrorMessage = "You need to enter your email address.")]
        [SjaEmail(ErrorMessage = "You need to enter an SJA email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "You need to enter your name.")]
        public string RealName { get; set; } = "";

        [BooleanRequired(ErrorMessage = "You need to confirm that you have read and agree to the privacy policy.")]
        public bool PrivacyPolicyAccept { get; set; }

        [BooleanRequired(ErrorMessage = "You need to confirm that you have read and agree to the terms of service.")]
        public bool TermsAccept { get; set; }
    }
}
