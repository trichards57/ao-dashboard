@page "/roles"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@attribute [Authorize(Policy = "CanEditRoles")]

@inject RoleManager<IdentityRole> RoleManager

<Container Title="User Roles" Expands>
    <table>
        <thead>
            <tr>
                <th>Role</th>
                <th>Vehicle Configuration</th>
                <th>VOR Data</th>
                <th>User Role</th>
                <th>Role Permissions</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in roles.OrderBy(r=>r.Name))
            {
                <tr>
                    <td>@r.Name</td>
                    <td>@r.VehicleConfiguration</td>
                    <td>@r.VorData</td>
                    <td>@r.Permissions</td>
                    <td>@r.RolePermissions</td>
                    <td class="edit">@if (r.CanEdit)
                        {
                            <a href="/roles/@r.Id/edit">Edit</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</Container>

@code
{
    private List<RoleDescription> roles = new();

    protected override async Task OnInitializedAsync()
    {
        var roleList = RoleManager.Roles.ToList();

        roles.Clear();

        foreach (var r in roleList)
        {
            var claims = await RoleManager.GetClaimsAsync(r);

            roles.Add(new RoleDescription
                {
                    Id = r.Id,
                    Name = r.Name ?? "",
                    Permissions = CheckPermission(claims, UserClaims.Permissions),
                    VehicleConfiguration = CheckPermission(claims, UserClaims.VehicleConfiguration),
                    VorData = CheckPermission(claims, UserClaims.VorData),
                });
        }
    }

    private string CheckPermission(IList<Claim> claims, string type)
    {
        var c = claims.FirstOrDefault(k => k.Type == type);

        if (c == null)
        {
            return "Deny";
        }
        else if (c.Value == UserClaims.Read)
        {
            return "Read";
        }
        else if (c.Value == UserClaims.Edit)
        {
            return "Read/Write";
        }

        return "Deny";
    }

    private class RoleDescription
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string VehicleConfiguration { get; set; }
        public string VorData { get; set; }
        public string Permissions { get; set; }
        public string RolePermissions => Name == "Administrator" ? "Read/Write" : "Deny";
        public bool CanEdit => Name != "Administrator";
    }
}
