@page "/vehicles/config"

@attribute [Authorize(Policy = "CanEditVehicles")]
@rendermode InteractiveAuto

@using Dashboard.Client.Model
@using Dashboard.Client.Model.Converters
@using Dashboard.Client.Services
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager navigationManager
@inject IVehicleService vehicleService

<PageTitle>AO Dashboard - Vehicle Setup</PageTitle>

<h1 class="title">Vehicle Setup</h1>

<PlacePicker Place="Place" />
<div class="table-container">
    <table class="table is-striped is-fullwidth">
        <thead>
            <tr>
                <th class="edit-col"></th>
                <th class="call-sign-col">Call Sign</th>
                <th class="reg-col">Registration</th>
                <th>Region</th>
                <th>District</th>
                <th>Hub</th>
            </tr>
        </thead>
        <tbody>
            @if (loading)
            {
                <tr>
                    <td colspan="6">
                        <progress class="progress my-4" max="100">30%</progress>
                    </td>
                </tr>
            }
            else if (StatusesToDisplay.Any())
            {
                foreach (var s in StatusesToDisplay.Skip(page * PageSize).Take(PageSize))
                {
                    <tr>
                        <td class="edit-col">
                            <a href="/vehicles/config/@s.Id">
                                <img class="fa-img" src="/img/fa/pen.svg" />
                            </a>
                        </td>
                        <td class="call-sign-col">@s.CallSign</td>
                        <td class="reg-col">@s.Registration</td>
                        <td class="place-col">@RegionConverter.ToDisplayString(RegionConverter.ToRegion(s.Region))</td>
                        <td class="place-col">@s.District</td>
                        <td class="place-col">@s.Hub</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="no-vehicles">No Vehicles</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (ShowPagination)
{
    <PagePicker Page="@(page)"
                Pages="@((int)Math.Ceiling((float)StatusesToDisplay.Count()/PageSize))"
                ChangePage="p => page = p" />
}

@code {
    private ICollection<Dashboard.Grpc.Vehicle> statuses = new List<Dashboard.Grpc.Vehicle>();
    private int page;
    private const int PageSize = 10;
    private string filter = "";
    private bool loading = false;

    [SupplyParameterFromQuery]
    public string Region { get; set; } = "all";

    [SupplyParameterFromQuery]
    public string District { get; set; } = "all";

    [SupplyParameterFromQuery]
    public string Hub { get; set; } = "all";
    
    private Dashboard.Grpc.Place Place => new Dashboard.Grpc.Place {
        Region = RegionConverter.ToRegion(RegionConverter.ToRegion(Region ?? "all")), 
        District = District ?? "all", 
        Hub = Hub ?? "all" 
    };

    private bool ShowPagination => StatusesToDisplay.Count() > PageSize;

    private IEnumerable<Dashboard.Grpc.Vehicle> StatusesToDisplay => statuses.OrderBy(v => v.CallSign)
                    .Where(v => string.IsNullOrWhiteSpace(filter)
                        || v.CallSign.Contains(filter.Trim(), StringComparison.InvariantCultureIgnoreCase)
                        || v.Registration.Contains(filter.Trim(), StringComparison.InvariantCultureIgnoreCase));

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        statuses = await vehicleService.GetSettingsAsync(Place).ToListAsync();
        loading = false;
    }
}